// Code generated by goctl. DO NOT EDIT.
// Source: sys.proto

package permissionservice

import (
	"context"

	"code-storm/rpc/sys/sysClient"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddAppReq            = sysClient.AddAppReq
	AddAppResp           = sysClient.AddAppResp
	AddDepartmentReq     = sysClient.AddDepartmentReq
	AddDepartmentResp    = sysClient.AddDepartmentResp
	AddPermissionReq     = sysClient.AddPermissionReq
	AddPermissionResp    = sysClient.AddPermissionResp
	AddRoleReq           = sysClient.AddRoleReq
	AddRoleResp          = sysClient.AddRoleResp
	AppInfoReq           = sysClient.AppInfoReq
	AppInfoResp          = sysClient.AppInfoResp
	DeleteAppReq         = sysClient.DeleteAppReq
	DeleteAppResp        = sysClient.DeleteAppResp
	DeleteDepartmentReq  = sysClient.DeleteDepartmentReq
	DeleteDepartmentResp = sysClient.DeleteDepartmentResp
	DeletePermissionReq  = sysClient.DeletePermissionReq
	DeletePermissionResp = sysClient.DeletePermissionResp
	DeleteRoleReq        = sysClient.DeleteRoleReq
	DeleteRoleResp       = sysClient.DeleteRoleResp
	DepartmentInfoReq    = sysClient.DepartmentInfoReq
	DepartmentInfoResp   = sysClient.DepartmentInfoResp
	ListAppReq           = sysClient.ListAppReq
	ListAppResp          = sysClient.ListAppResp
	ListDepartmentReq    = sysClient.ListDepartmentReq
	ListDepartmentResp   = sysClient.ListDepartmentResp
	ListPermissionReq    = sysClient.ListPermissionReq
	ListPermissionResp   = sysClient.ListPermissionResp
	ListRoleReq          = sysClient.ListRoleReq
	ListRoleResp         = sysClient.ListRoleResp
	LoginReq             = sysClient.LoginReq
	LoginResp            = sysClient.LoginResp
	PermissionInfoReq    = sysClient.PermissionInfoReq
	PermissionInfoResp   = sysClient.PermissionInfoResp
	RoleInfoReq          = sysClient.RoleInfoReq
	RoleInfoResp         = sysClient.RoleInfoResp
	UpdateAppReq         = sysClient.UpdateAppReq
	UpdateAppResp        = sysClient.UpdateAppResp
	UpdateDepartmentReq  = sysClient.UpdateDepartmentReq
	UpdateDepartmentResp = sysClient.UpdateDepartmentResp
	UpdatePermissionReq  = sysClient.UpdatePermissionReq
	UpdatePermissionResp = sysClient.UpdatePermissionResp
	UpdateRoleReq        = sysClient.UpdateRoleReq
	UpdateRoleResp       = sysClient.UpdateRoleResp
	UserInfo             = sysClient.UserInfo
	UserListReq          = sysClient.UserListReq
	UserListResp         = sysClient.UserListResp

	PermissionService interface {
		PermissionAdd(ctx context.Context, in *AddPermissionReq, opts ...grpc.CallOption) (*AddPermissionResp, error)
		PermissionInfo(ctx context.Context, in *PermissionInfoReq, opts ...grpc.CallOption) (*PermissionInfoResp, error)
		PermissionList(ctx context.Context, in *ListPermissionReq, opts ...grpc.CallOption) (*ListPermissionResp, error)
		PermissionUpdate(ctx context.Context, in *UpdatePermissionReq, opts ...grpc.CallOption) (*UpdatePermissionResp, error)
		PermissionDelete(ctx context.Context, in *DeletePermissionReq, opts ...grpc.CallOption) (*DeletePermissionResp, error)
	}

	defaultPermissionService struct {
		cli zrpc.Client
	}
)

func NewPermissionService(cli zrpc.Client) PermissionService {
	return &defaultPermissionService{
		cli: cli,
	}
}

func (m *defaultPermissionService) PermissionAdd(ctx context.Context, in *AddPermissionReq, opts ...grpc.CallOption) (*AddPermissionResp, error) {
	client := sysClient.NewPermissionServiceClient(m.cli.Conn())
	return client.PermissionAdd(ctx, in, opts...)
}

func (m *defaultPermissionService) PermissionInfo(ctx context.Context, in *PermissionInfoReq, opts ...grpc.CallOption) (*PermissionInfoResp, error) {
	client := sysClient.NewPermissionServiceClient(m.cli.Conn())
	return client.PermissionInfo(ctx, in, opts...)
}

func (m *defaultPermissionService) PermissionList(ctx context.Context, in *ListPermissionReq, opts ...grpc.CallOption) (*ListPermissionResp, error) {
	client := sysClient.NewPermissionServiceClient(m.cli.Conn())
	return client.PermissionList(ctx, in, opts...)
}

func (m *defaultPermissionService) PermissionUpdate(ctx context.Context, in *UpdatePermissionReq, opts ...grpc.CallOption) (*UpdatePermissionResp, error) {
	client := sysClient.NewPermissionServiceClient(m.cli.Conn())
	return client.PermissionUpdate(ctx, in, opts...)
}

func (m *defaultPermissionService) PermissionDelete(ctx context.Context, in *DeletePermissionReq, opts ...grpc.CallOption) (*DeletePermissionResp, error) {
	client := sysClient.NewPermissionServiceClient(m.cli.Conn())
	return client.PermissionDelete(ctx, in, opts...)
}
