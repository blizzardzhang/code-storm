// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: sys.proto

package sysclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClientService_ClientAdd_FullMethodName    = "/sysclient.ClientService/ClientAdd"
	ClientService_ClientInfo_FullMethodName   = "/sysclient.ClientService/ClientInfo"
	ClientService_ClientList_FullMethodName   = "/sysclient.ClientService/ClientList"
	ClientService_ClientUpdate_FullMethodName = "/sysclient.ClientService/ClientUpdate"
	ClientService_ClientDelete_FullMethodName = "/sysclient.ClientService/ClientDelete"
)

// ClientServiceClient is the client API for ClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientServiceClient interface {
	ClientAdd(ctx context.Context, in *AddClientReq, opts ...grpc.CallOption) (*AddClientResp, error)
	ClientInfo(ctx context.Context, in *ClientInfoReq, opts ...grpc.CallOption) (*ClientInfoResp, error)
	ClientList(ctx context.Context, in *ListClientReq, opts ...grpc.CallOption) (*ListClientResp, error)
	ClientUpdate(ctx context.Context, in *UpdateClientReq, opts ...grpc.CallOption) (*UpdateClientResp, error)
	ClientDelete(ctx context.Context, in *DeleteClientReq, opts ...grpc.CallOption) (*DeleteClientResp, error)
}

type clientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientServiceClient(cc grpc.ClientConnInterface) ClientServiceClient {
	return &clientServiceClient{cc}
}

func (c *clientServiceClient) ClientAdd(ctx context.Context, in *AddClientReq, opts ...grpc.CallOption) (*AddClientResp, error) {
	out := new(AddClientResp)
	err := c.cc.Invoke(ctx, ClientService_ClientAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) ClientInfo(ctx context.Context, in *ClientInfoReq, opts ...grpc.CallOption) (*ClientInfoResp, error) {
	out := new(ClientInfoResp)
	err := c.cc.Invoke(ctx, ClientService_ClientInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) ClientList(ctx context.Context, in *ListClientReq, opts ...grpc.CallOption) (*ListClientResp, error) {
	out := new(ListClientResp)
	err := c.cc.Invoke(ctx, ClientService_ClientList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) ClientUpdate(ctx context.Context, in *UpdateClientReq, opts ...grpc.CallOption) (*UpdateClientResp, error) {
	out := new(UpdateClientResp)
	err := c.cc.Invoke(ctx, ClientService_ClientUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) ClientDelete(ctx context.Context, in *DeleteClientReq, opts ...grpc.CallOption) (*DeleteClientResp, error) {
	out := new(DeleteClientResp)
	err := c.cc.Invoke(ctx, ClientService_ClientDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientServiceServer is the server API for ClientService service.
// All implementations must embed UnimplementedClientServiceServer
// for forward compatibility
type ClientServiceServer interface {
	ClientAdd(context.Context, *AddClientReq) (*AddClientResp, error)
	ClientInfo(context.Context, *ClientInfoReq) (*ClientInfoResp, error)
	ClientList(context.Context, *ListClientReq) (*ListClientResp, error)
	ClientUpdate(context.Context, *UpdateClientReq) (*UpdateClientResp, error)
	ClientDelete(context.Context, *DeleteClientReq) (*DeleteClientResp, error)
	mustEmbedUnimplementedClientServiceServer()
}

// UnimplementedClientServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClientServiceServer struct {
}

func (UnimplementedClientServiceServer) ClientAdd(context.Context, *AddClientReq) (*AddClientResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientAdd not implemented")
}
func (UnimplementedClientServiceServer) ClientInfo(context.Context, *ClientInfoReq) (*ClientInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientInfo not implemented")
}
func (UnimplementedClientServiceServer) ClientList(context.Context, *ListClientReq) (*ListClientResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientList not implemented")
}
func (UnimplementedClientServiceServer) ClientUpdate(context.Context, *UpdateClientReq) (*UpdateClientResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientUpdate not implemented")
}
func (UnimplementedClientServiceServer) ClientDelete(context.Context, *DeleteClientReq) (*DeleteClientResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientDelete not implemented")
}
func (UnimplementedClientServiceServer) mustEmbedUnimplementedClientServiceServer() {}

// UnsafeClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientServiceServer will
// result in compilation errors.
type UnsafeClientServiceServer interface {
	mustEmbedUnimplementedClientServiceServer()
}

func RegisterClientServiceServer(s grpc.ServiceRegistrar, srv ClientServiceServer) {
	s.RegisterService(&ClientService_ServiceDesc, srv)
}

func _ClientService_ClientAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).ClientAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_ClientAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).ClientAdd(ctx, req.(*AddClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_ClientInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).ClientInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_ClientInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).ClientInfo(ctx, req.(*ClientInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_ClientList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).ClientList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_ClientList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).ClientList(ctx, req.(*ListClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_ClientUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).ClientUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_ClientUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).ClientUpdate(ctx, req.(*UpdateClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_ClientDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).ClientDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_ClientDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).ClientDelete(ctx, req.(*DeleteClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientService_ServiceDesc is the grpc.ServiceDesc for ClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sysclient.ClientService",
	HandlerType: (*ClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientAdd",
			Handler:    _ClientService_ClientAdd_Handler,
		},
		{
			MethodName: "ClientInfo",
			Handler:    _ClientService_ClientInfo_Handler,
		},
		{
			MethodName: "ClientList",
			Handler:    _ClientService_ClientList_Handler,
		},
		{
			MethodName: "ClientUpdate",
			Handler:    _ClientService_ClientUpdate_Handler,
		},
		{
			MethodName: "ClientDelete",
			Handler:    _ClientService_ClientDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys.proto",
}
