// Code generated by goctl. DO NOT EDIT.

package sysmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	stormClientFieldNames          = builder.RawFieldNames(&StormClient{})
	stormClientRows                = strings.Join(stormClientFieldNames, ",")
	stormClientRowsExpectAutoSet   = strings.Join(stringx.Remove(stormClientFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	stormClientRowsWithPlaceHolder = strings.Join(stringx.Remove(stormClientFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheStormClientIdPrefix = "cache:stormClient:id:"
)

type (
	stormClientModel interface {
		Insert(ctx context.Context, data *StormClient) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*StormClient, error)
		Update(ctx context.Context, data *StormClient) error
		Delete(ctx context.Context, id int64) error
	}

	defaultStormClientModel struct {
		sqlc.CachedConn
		table string
	}

	StormClient struct {
		Id             int64  `db:"id"`
		Name           string `db:"name"`
		ClientId       string `db:"client_id"`
		ClientSecret   string `db:"client_secret"`
		ClientKey      string `db:"client_key"`
		AdditionalInfo string `db:"additional_info"`
		GrantType      string `db:"grant_type"`
		ExpireIn       int64  `db:"expire_in"`
		RefreshAfter   int64  `db:"refresh_after"`
		Remark         string `db:"remark"`
		Status         int64  `db:"status"`
		IsDeleted      int64  `db:"is_deleted"`
	}
)

func newStormClientModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultStormClientModel {
	return &defaultStormClientModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`storm_client`",
	}
}

func (m *defaultStormClientModel) Delete(ctx context.Context, id int64) error {
	stormClientIdKey := fmt.Sprintf("%s%v", cacheStormClientIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, stormClientIdKey)
	return err
}

func (m *defaultStormClientModel) FindOne(ctx context.Context, id int64) (*StormClient, error) {
	stormClientIdKey := fmt.Sprintf("%s%v", cacheStormClientIdPrefix, id)
	var resp StormClient
	err := m.QueryRowCtx(ctx, &resp, stormClientIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", stormClientRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStormClientModel) Insert(ctx context.Context, data *StormClient) (sql.Result, error) {
	stormClientIdKey := fmt.Sprintf("%s%v", cacheStormClientIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, stormClientRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Name, data.ClientId, data.ClientSecret, data.ClientKey, data.AdditionalInfo, data.GrantType, data.ExpireIn, data.RefreshAfter, data.Remark, data.Status, data.IsDeleted)
	}, stormClientIdKey)
	return ret, err
}

func (m *defaultStormClientModel) Update(ctx context.Context, data *StormClient) error {
	stormClientIdKey := fmt.Sprintf("%s%v", cacheStormClientIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, stormClientRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.ClientId, data.ClientSecret, data.ClientKey, data.AdditionalInfo, data.GrantType, data.ExpireIn, data.RefreshAfter, data.Remark, data.Status, data.IsDeleted, data.Id)
	}, stormClientIdKey)
	return err
}

func (m *defaultStormClientModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheStormClientIdPrefix, primary)
}

func (m *defaultStormClientModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", stormClientRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultStormClientModel) tableName() string {
	return m.table
}
