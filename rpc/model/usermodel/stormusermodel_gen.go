// Code generated by goctl. DO NOT EDIT.

package usermodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	stormUserFieldNames          = builder.RawFieldNames(&StormUser{})
	stormUserRows                = strings.Join(stormUserFieldNames, ",")
	stormUserRowsExpectAutoSet   = strings.Join(stringx.Remove(stormUserFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	stormUserRowsWithPlaceHolder = strings.Join(stringx.Remove(stormUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheStormUserIdPrefix = "cache:stormUser:id:"
)

type (
	stormUserModel interface {
		Insert(ctx context.Context, data *StormUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*StormUser, error)
		FindByAccountAndPwd(ctx context.Context, account string, password string) (*StormUser, error)
		Update(ctx context.Context, data *StormUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultStormUserModel struct {
		sqlc.CachedConn
		table string
	}

	StormUser struct {
		Id         int64          `db:"id"`
		Account    string         `db:"account"`
		Password   string         `db:"password"`
		Name       sql.NullString `db:"name"`
		RealName   sql.NullString `db:"real_name"`
		Phone      sql.NullString `db:"phone"`
		Address    sql.NullString `db:"address"`
		Email      sql.NullString `db:"email"`
		CreateTime sql.NullTime   `db:"create_time"`
		CreateBy   sql.NullInt64  `db:"create_by"`
		UpdateBy   sql.NullInt64  `db:"update_by"`
		UpdateTime sql.NullTime   `db:"update_time"`
		Status     int64          `db:"status"`
		IsDeleted  int64          `db:"is_deleted"`
	}
)

func newStormUserModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultStormUserModel {
	return &defaultStormUserModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`storm_user`",
	}
}

func (m *defaultStormUserModel) Delete(ctx context.Context, id int64) error {
	stormUserIdKey := fmt.Sprintf("%s%v", cacheStormUserIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, stormUserIdKey)
	return err
}

func (m *defaultStormUserModel) FindOne(ctx context.Context, id int64) (*StormUser, error) {
	stormUserIdKey := fmt.Sprintf("%s%v", cacheStormUserIdPrefix, id)
	var resp StormUser
	err := m.QueryRowCtx(ctx, &resp, stormUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", stormUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStormUserModel) FindByAccountAndPwd(ctx context.Context, account string, pwd string) (*StormUser, error) {
	stormUserIdKey := fmt.Sprintf("%s%v", cacheStormUserIdPrefix, account)
	var resp StormUser
	err := m.QueryRowCtx(ctx, &resp, stormUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `account` = ? and `password` = ? limit 1", stormUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, account, pwd)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStormUserModel) Insert(ctx context.Context, data *StormUser) (sql.Result, error) {
	stormUserIdKey := fmt.Sprintf("%s%v", cacheStormUserIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, stormUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Account, data.Password, data.Name, data.RealName, data.Phone, data.Address, data.Email, data.CreateBy, data.UpdateBy, data.Status, data.IsDeleted)
	}, stormUserIdKey)
	return ret, err
}

func (m *defaultStormUserModel) Update(ctx context.Context, data *StormUser) error {
	stormUserIdKey := fmt.Sprintf("%s%v", cacheStormUserIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, stormUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Account, data.Password, data.Name, data.RealName, data.Phone, data.Address, data.Email, data.CreateBy, data.UpdateBy, data.Status, data.IsDeleted, data.Id)
	}, stormUserIdKey)
	return err
}

func (m *defaultStormUserModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheStormUserIdPrefix, primary)
}

func (m *defaultStormUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", stormUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultStormUserModel) tableName() string {
	return m.table
}
